/*------------------------------------------------------------------------------	Newton interface to memory chunk reader.------------------------------------------------------------------------------*/#include "Objects.h"#include "NewtonDebug.h"/*----------------------------------------------------------------------	Read memory into a binary object.	Typically the binary object is a page (4K) in size, hence the name.	Args:		ioData					binary object				inAddr					address from which to read	Return:	modified ioData----------------------------------------------------------------------*/extern "C"Ref FetchPage(RefArg rcvr, RefArg ioData, RefArg inAddr){	if (!IsBinary(ioData))		ThrowBadTypeWithFrameData(kNSErrNotABinaryObject, ioData);	if (!IsInt(inAddr))		ThrowBadTypeWithFrameData(kNSErrNotAnInteger, inAddr);	long byteLen = Length(ioData);	char * memPtr = (char *)inAddr;	// address Ref is read as 32-bit, long-aligned	WITH_LOCKED_BINARY(ioData, dataPtr)		while (byteLen-- > 0)		{			*dataPtr++ = *memPtr++;		}	END_WITH_LOCKED_BINARY(ioData)	return ioData;}